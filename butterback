#! /usr/bin/python3

# Copyright Â© 2015-2020 Vladimir Olteanu <vl.olteanu@gmail.com>
# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# the COPYING file for more details.

import os
import sys
import subprocess

CONFIG_PATH = '/etc/butterback/'
ROOT_PATH   = CONFIG_PATH + 'root'
TARGET_PATH = CONFIG_PATH + "targets/"
DATE_FMT    = "%Y-%m-%d-%T"

def exec(cmd):
	print(cmd)
	subprocess.run(cmd, check = True)

def date():
	raw_date = subprocess.check_output(['date', '+' + DATE_FMT])
	raw_date = raw_date[:len(raw_date) - 1] #strip \n
	
	return raw_date.decode("utf-8")

class Host:
	def backup(self, root, name, source):
		if (not self.is_dir(root)):
			self.run(['mkdir', root])
		if (not self.is_dir(root + '/' + name)):
			self.run(['mkdir', root + '/' + name])
		
		current_path = root + '/' + name + '/current'
		if (not self.is_dir(current_path)):
			self.run(['sudo', 'btrfs', 'subvolume', 'create', current_path])
		
		exec(['rsync',  '-a',  '--delete',  '--progress', source, self.rsync_pref() + current_path])
	
		snap_path = root + '/' + name + '/' + date()
		self.run(['sudo', 'btrfs', 'subvolume', 'snapshot', current_path, snap_path])
		
	def list(self, root, name):
		self.run(['ls', '-1', root + '/' + name])
	
	def restore(self, root, name, revision, destination):
		if (not self.is_dir(destination)):
			self.run(['mkdir', '-p', destination])
		source = self.rsync_pref() + root + '/' + name + '/' + revision
		exec(['rsync',  '-a', '--delete', '--progress', source, destination])
		
class LocalHost(Host):
	def run(self, cmd):
		exec(cmd)
	
	def is_dir(self, path):
		return os.path.isdir(path)
	
	def rsync_pref(self):
		return ''

class RemoteHost(Host):
	def __init__(self, user, host):
		if (user == ''):
			raise Exception('Empty username');
		if (host == ''):
			raise Exception('Empty hostname');
		self.user = user
		self.host = host
		
	def ssh_host(self):
		return self.user + '@' + self.host
	
	def run(self, cmd):
		exec(['ssh', self.ssh_host()] + cmd)
	
	def is_dir(self, path):
		try:
			self.run(['[ -d "{}" ]'.format(path)])
		except:
			return False
		return True
		
	def rsync_pref(self):
		return self.ssh_host() + ':'

def separate_host(str):
	str_tokens = str.split(':')
	if (len(str_tokens) == 1):
		return [LocalHost(), str]
	elif (len(str_tokens) > 2):
		raise Exception('Bad root: ' + str)
	
	full_host = str_tokens[0]
	root = str_tokens[1]
	
	host_tokens = full_host.split('@')
	elif (len(host_tokens) != 2):
		raise Exception('Bad root: ' + str)
	else:
		user = host_tokens[0]
		host = host_tokens[1]
	
	return [RemoteHost(user, host), root]

def parse_root_file(path):
	if (os.path.isdir(ROOT_PATH)):
		return [LocalHost(), ROOT_PATH]
	
	file = open(ROOT_PATH)
	lines = file.readlines()
	file.close()
	
	if (len(lines) == 0):
		raise Exception("Bad root file format")
	for i in range(1, len(lines)):
		if (not lines[i].isspace()):
			raise Exception("Bad root file format")
	
	first_line = lines[0]
	first_line = first_line[:len(first_line) - 1] #strip \n
	
	return separate_host(first_line)

def usage(rc = 1):
	print('Usage: butterback <command> <command args>')
	print('\t' + 'backup <root> <name> <source>')
	print('\t' + 'list <root> <name>')
	print('\t' + 'restore <root> <name> <revision> <destination>')
	print('\t' + 'auto')
	print('\t' + 'help')
	
	sys.exit(rc)
	
def main(argv):
	if (len(argv) == 0):
		usage()
	elif (len(argv) == 1):
		if (argv[0] == 'auto'):
			[host, root] = parse_root_file(ROOT_PATH)
			
			for i in os.listdir(TARGET_PATH):
				host.backup(root, i, TARGET_PATH + i)
		elif (argv[0] == 'help'):
			usage(0)
		else:
			usage()
	else:
		[host, root] = separate_host(argv[1])
		
		if (argv[0] == 'backup'):
			if (len(argv) != 4):
				usage()
			host.backup(root, argv[2], argv[3])
		elif (argv[0] == 'list'):
			if (len(argv) != 3):
				usage()
			host.list(root, argv[2])
		elif (argv[0] == 'restore'):
			if (len(argv) != 5):
				usage()
			host.restore(root, argv[2], argv[3], argv[4])
		else:
			usage()

if __name__ == "__main__":
	main(sys.argv[1:])
