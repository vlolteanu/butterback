#! /usr/bin/python3

# Copyright Â© 2015-2020 Vladimir Olteanu <vl.olteanu@gmail.com>
# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# the COPYING file for more details.

import os
import sys
import getopt
import subprocess

def exec(cmd):
	print(cmd)
#	subprocess.run(cmd, check = True)

def date():
	DATE_FMT = "%Y-%m-%d-%T"
	
	raw_date = subprocess.check_output(['date', '+' + DATE_FMT])
	raw_date = raw_date[:len(raw_date) - 1] #strip \n
	return raw_date.decode("utf-8")

class Host:
	def backup(self, root, name, source):
		if (not self.is_dir(root)):
			self.run(['mkdir', root])
		if (not self.is_dir(root + '/' + name)):
			self.run(['mkdir', root + '/' + name])
		
		current_path = root + '/' + name + '/current'
		if (not self.is_dir(root + '/' + name + '/current')):
			self.run(['sudo', 'btrfs',  'subvolume',  'create', root + '/' + name + '/current'])
		
		exec(['rsync',  '-a',  '--delete',  '--progress', source, self.rsync_pref() + current_path])
	
		snap_path = root + '/' + name + '/' + date()
		self.run(['sudo', 'btrfs', 'subvolume', 'snapshot', current_path, snap_path])
		
	def list(self, root, name):
		self.run(['ls', '-1', root + '/' + name])
		return None
	
	def restore(self, root, name, revision, destination):
		if (not self.is_dir(destination)):
			self.run(['mkdir', '-p', destination])
		source = self.rsync_pref() + root + '/' + name + '/' + revision
		exec(['rsync',  '-a',  '--delete',  '--progress', source, destination])
		return None
		
class LocalHost(Host):
	def run(self, cmd):
		exec(cmd)
	
	def is_dir(self, path):
		return os.path.isdir(path)
	
	def rsync_pref(self):
		return ''

class RemoteHost(Host):
	def __init__(self, user, host):
		self.user = user
		self.host = host
	
	def run(self, cmd):
		if (user == ''):
			ssh_host = host
		else:
			ssh_host = self.user + '@' + self.host
		exec(['ssh', ssh_host] + cmd)
	
	def is_dir(self, path):
		try:
			self.run(['[ -d "{}" ]'.format(self.path)])
		except:
			return False
		return True
		
	def rsync_pref(self):
		return self.user + '@' + self.passwd + ':'

def separate_host(str):
	str_tokens = string.split(':')
	if (len(str_tokens == 1)):
		return [LocalHost(), str]
	full_host = str_tokens[0]
	root = str_tokens[1]
	
	host_tokens = full_host.split('@')
	if (len(host_tokens) == 1):
		user = ''
		host = full_host
	else:
		user = tokens[0]
		host = tokens[1]
	
	return [RemoteHost(user, host), root]

def usage():
	print('Usage: butterback <command> <command args>')
	print('\t' + 'backup <root> <name> <source>')
	print('\t' + 'list <root> <name>')
	print('\t' + 'restore <root> <name> <revision> <destination>')
	exit(1)
	
def main(argv):
	if (len(argv) == 0):
		ROOT_PATH = '/etc/butterback/root/'
		
		if (os.path.isdir(ROOT_PATH)):
			host = LocalHost()
			root = ROOT_PATH
		else:
			#TODO
			host = None
		
		for i in os.listdir('/etc/butterback/targets'):
			host.backup('/etc/butterback/root/', i, '/etc/butterback/targets/{}/'.format(i))
	else:
		if (argv[0] == 'backup'):
			if (len(argv) != 4):
				usage()
			LocalHost().backup(argv[1], argv[2], argv[3])
		elif (argv[0] == 'list'):
			if (len(argv) != 3):
				usage()
			LocalHost().list(argv[1], argv[2])
		elif (argv[0] == 'restore'):
			if (len(argv) != 5):
				usage()
			LocalHost().restore(argv[1], argv[2], argv[3], argv[4])
		else:
			usage()

if __name__ == "__main__":
	main(sys.argv[1:])
